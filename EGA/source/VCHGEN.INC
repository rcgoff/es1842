	SUBTTL	VCHGEN.INC
	PAGE
;------------------------------------------------
; ENTRY						:
;	AL = 0	USER SPECIFIED FONT		:
;	     1	8 X 14 FONT			:
;	     2	8 X 8 DOUBLE DOT		:
;	BL = BLOCK TO LOAD			:
;------------------------------------------------
CH_GEN:
	PUSH	AX				; SAVE THE INVOLVED REGS
	PUSH	BP
	PUSH	BX
	PUSH	CX
	PUSH	DX
	PUSH	ES

	ASSUME	DS:ABS0
	CALL	DDS				; SET DATA SEGMENT
	MOV	AL,CRT_MODE			; GET THE CURRENT MODE
	PUSH	AX				; SAVE IT
	CMP	AL,7				; IS THIS MONOCHROME
	JE	H14				; MONOCHROME VALUES
	MOV	CRT_MODE,0BH			; COLOR VALUES
	JMP	SHORT H15			; SKIP
H14:
	MOV	CRT_MODE,0CH			; MONOCHROME VALUES
H15:
	CALL	SET_REGS
	CALL	DDS				; RESET THE DATA SEGMENT
	POP	AX				; RECOVER OLD MODE VALUE
	MOV	CRT_MODE,AL			; RETURN TO LOW MEMORY

	POP	ES				; RESTORE REGS THAT WERE
	POP	DX				;  USED BY THE MODE SET
	POP	CX				;  ROUTINES
	POP	BX
	POP	BP
	POP	AX

	OR	AL,AL				; SET FLAGS
	JZ	DO_MAP2				; USER SPECIFIED FONT
	PUSH	CS				; SET SEGMENT TO
	POP	ES				;  THIS MODULE
	SUB	DX,DX				; ZERO OUT START OFFSET
	MOV	CX,0256D			; CHAR COUNT (FULL SET)
	DEC	AL				; WHICH PARAMETER
	JNZ	H7				; MUST BE ONE
	MOV	BH,014D				; BYTES PER CHARACTER
	MOV	BP,OFFSET CGMN			; 8 X 14 TABLE OFFSET
	JMP	SHORT DO_MAP2			; STORE IT
H7:
	MOV	BH,8				; 8 X 8 FONT
	MOV	BP,OFFSET CGDDOT		; ROM 8 X 8 DOUBLE DOT

;------------------------------------------------
; ALPHA CHARACTER GENERATOR LOAD		:
;						:
; ENTRY						:
;	ES:BP - POINTER TO TABLE		:
;	CX - COUNT OF CHARS			:
;	DX - CHAR COUNT OFFSET INTO MAP 2	:
;	BH - BYTES PER CHARACTER		:
;	BL - MAP 2 BLOCK TO LOAD		:
;------------------------------------------------
DO_MAP2:
	PUSH	ES				; FONT TABLE SEGMENT
	POP	DS				; ADDRESSING TO TABLE
	PUSH	DX				; SAVE REGISTER
	SRLOAD	ES,0A000H			; ADDRESSING TO MAP 2
	POP	DX				; RECOVER REGISTER
	PUSH	CX				; MULTIPLY BY 020H SINCE
	MOV	CL,5				;  MAXIMUM BYTES PER
	SHL	DX,CL				;  CHARACTER IS 32D=020H
	POP	CX				; RECOVER
	OR	BL,BL				; WHICH 16K BLOCK TO LOAD
	JZ	H3				; BLOCK ZERO
H4:
	ADD	DX,04000H			; INCREMENT TO NEXT BLOCK
	DEC	BL				; ANY MORE
	JNZ	H4				; DO ANOTHER
H3:
	MOV	AL,BH				; BYTES PER CHARACTER
	SUB	AH,AH				; ZERO
	MOV	DI,DX				; OFFSET INTO MAP
	MOV	SI,BP				; OFFSET INTO TABLE
	JCXZ	LD_OVER				; CHARACTER COUNT
LD:
	PUSH	CX				; SAVE CHARACTER COUNT
	MOV	CX,AX				; ONE ENTIRE CHARACTER
	REP	MOVSB				;  AT A TIME
	SUB	DI,AX				; ADJUST OFFSET
	ADD	DI,020H				; NEXT CHARACTER POSITION
	POP	CX				; RECOVER CHARACTER COUNT
	LOOP	LD				; DO THE REST
LD_OVER:
	RET

BRK_1:
	ASSUME	DS:ABS0
	CALL	DDS				; SET LOW MEMORY SEGMENT
	MOV	POINTS,AX			; GET BYTES/CHARACTER
	MOV	DX,ADDR_6845			; CRTC REGISTER
	CMP	CRT_MODE,7
	JNE	H11A
	MOV	AH,C_UNDERLN_LOC		; R14H
	CALL	OUT_DX				; SET THE UNDERLINE LOC
H11A:
	DEC	AL				; POINTS - 1
	MOV	AH,C_MAX_SCAN_LN		; R09H
	CALL	OUT_DX				; SET THE CHARACTER HEIGHT
	DEC	AL				; POINTS - 2

	MOV	CH,AL				; CURSOR START
	MOV	CL,AL				; CURSOR END
	INC	CL				; ADJUST END
	MOV	AH,1				; SET C_TYPE BIOS CALL
	INT	10H				; SET THE CURSOR

	MOV	BL,CRT_MODE			; GET THE CURRENT MODE
	MOV	AX,350D				; MAX SCANS ON SCREEN
	CMP	BL,3				; 640X200 ALPHA MODES
	JA	H11				; MUST BE 350
	CALL	BRST_DET
	JC	H11
	MOV	AX,200D				; SET FOR 200
H11:
	CWD					; PREPARE TO DIVIDE
	DIV	POINTS				; MAX ROWS ON SCREEN
	DEC	AX				; ADJUST
	MOV	ROWS,AL				; SAVE ROWS
	INC	AL				; READJUST
	SUB	AH,AH				; CLEAR
	MUL	POINTS				; ROWS*BYTES/CHAR
	DEC	AX				; ADJUST
	MOV	DX,ADDR_6845			; CRTC ADDRESS
	MOV	AH,C_VRT_DSP_END		; SCANS DISPLAYED
	CALL	OUT_DX				; SET IT
	MOV	AL,ROWS				; GET CHARACTER ROWS
	INC	AL				; ADJUST
	MUL	BYTE PTR CRT_COLS		; ROWS*COLUMNS
	SHL	AX,1				; *2 FOR ALPHA MODE
	ADD	AX,256D				; SPACE BETWEEN PAGES
	MOV	CRT_LEN,AX			; BYTES PER PAGE
	CALL	PH_5				; VIDEO ON
	JMP	V_RET				; RETURN TO CALLER

;----- LOADABLE CHARACTER GENERATOR ROUTINES

AH11:
	CMP	AL,010H				; CHECK PARAMETER
	JAE	AH11_ALPHA1			; NEXT STAGE

;----- ALPHA MODE ACTIVITY HERE

	CMP	AL,03H				; RANGE CHECK
	JAE	H1				; NEXT STAGE
	CALL	CH_GEN				; SET THE CHAR GEN
	CALL	SET_REGS
	CALL	PH_5				; VIDEO ON
	ASSUME	DS:ABS0
	CALL	DDS				; SET THE DATA SEGMENT
	MOV	CX,CURSOR_MODE			; GET THE MODE
	MOV	AH,1				; SET C_TYPE
	INT	10H				; EMULATE CORRECT CURSOR
	JMP	V_RET				; RETURN TO CALLER

;----- SET THE CHARACTER GENERATOR BLOCK SELECT REGISTER

H1:
	JNE	H2				; NOT IN RANGE
	MOV	DH,3
	MOV	DL,SEQ_ADDR			; SEQUENCER

	MOV	AX,1				; AH=S_RESET, AL=1
	CALL	OUT_DX

	MOV	AH,S_CGEN			; CHAR BLOCK REGISTER
	MOV	AL,BL				; GET THE VALUE
	CALL	OUT_DX				; SET IT

	MOV	AX,3				; AH=S_RESET, AL=3
	CALL	OUT_DX
H2:
	JMP	V_RET				; RETURN TO CALLER

AH11_ALPHA1:
	ASSUME	DS:ABS0
	CMP	AL,020H
	JAE	AH11_GRAPHICS

;----- ALPHA MODE ACTIVITY HERE

	SUB	AL,010H				; ADJUST TO 0 - N
	CMP	AL,02H				; RANGE CHECK
	JA	H2				; INVALID CALL
	PUSH	AX				; SAVE
	PUSH	BX
	CALL	CH_GEN				; LOAD THE CHAR GEN
	CALL	SET_REGS
	POP	BX
	POP	AX				; RESTORE
	MOV	AH,AL				; CALLING PARAMETER
	OR	AH,AH				; USER MODE
	MOV	AL,BH
	JZ	H13				; DO NOT SET BYTES/CHAR
	MOV	AL,8				; 8 X 8 FONT
	CMP	AH,1				; IS THIS CALL FOR MONOC
	JNE	H13				; NO, LEAVE IT AT 8
	MOV	AL,14D				; MONOC SET
H13:
	SUB	AH,AH				; CLEAR UPPER BYTE
	JMP	BRK_1				; CONTINUE

;----- GRAPHICS MODE ACTIVITY HERE

AH11_GRAPHICS:
	ASSUME	DS:ABS0
	CMP	AL,030H
	JAE	AH11_INFORM
	SUB	AL,020H
	JNZ	F10

;----- COMPATIBILITY, UPPER HALF GRAPHICS CHARACTER SET

	ASSUME	DS:ABS0
	SRLOAD	DS,0
	CLI
	MOV	WORD PTR EXT_PTR , BP
	MOV	WORD PTR EXT_PTR + 2 , ES
	STI
F11:
	JMP	V_RET
F10:
	ASSUME	DS:ABS0
	PUSH	DX
	SRLOAD	DS,0
	POP	DX
	CMP	AL,03H				; RANGE CHECK
	JA	F11
	DEC	AL
	JZ	F19
	PUSH	CS
	POP	ES
	DEC	AL
	JNZ	F13
	MOV	CX,14D
	MOV	BP,OFFSET CGMN			; ROM 8 X 14 CHARACTER SET
	JMP	SHORT F19
F13:
	MOV	CX,8
	MOV	BP,OFFSET CGDDOT		; ROM 8 X 8 DOUBLE DOT
F19:
	CLI
	MOV	WORD PTR GRX_SET , BP
	MOV	WORD PTR GRX_SET + 2 , ES
	STI
	ASSUME	DS:ABS0
	CALL	DDS
	MOV	POINTS,CX
	MOV	AL,BL
	MOV	BX,OFFSET RT
	OR	AL,AL
	JNZ	DR_3
	MOV	AL,DL
	JMP	DR_1
DR_3:
	CMP	AL,3
	JBE	DR_2
	MOV	AL,2
DR_2:
	XLAT	CS:RT
DR_1:
	DEC	AL
	MOV	ROWS,AL
	JMP	V_RET

RT	LABEL	BYTE
	DB	00D,14D,25D,43D


;----- INFORMATION RETURN DONE HERE

AH11_INFORM:
	ASSUME	DS:ABS0
	CMP	AL,030H
	JE	F6
F5:
	JMP	V_RET
F6:
	MOV	CX,POINTS
	MOV	DL,ROWS
	CMP	BH,7
	JA	F5
	CMP	BH,1
	JA	F7

	ASSUME	DS:ABS0
	PUSH	DX
	SRLOAD	DS,0
	POP	DX
	OR	BH,BH
	JNZ	F9
	LES	BP,EXT_PTR
	JMP	INFORM_OUT
F9:
	LES	BP,GRX_SET
	JMP	INFORM_OUT

;----- HANDLE BH = 2 THRU BH = 5 HERE  RETURN ROM TABLE POINTERS

F7:
	ASSUME	DS:ABS0
	SUB	BH,2
	MOV	BL,BH
	SUB	BH,BH
	SAL	BX,1
	ADD	BX,OFFSET TBL_5
	MOV	BP,CS:[BX]
	PUSH	CS
	POP	ES

INFORM_OUT:
	POP	DI
	POP	SI
	POP	BX
	POP	AX				; DISCARD SAVED CX
	POP	AX				; DISCARD SAVED DX
	POP	DS
	POP	AX				; DISCARD SAVED ES
	POP	AX				; DISCARD SAVED BP
	IRET

;----- TABLE OF CHARACTER GENERATOR OFFSETS

TBL_5 LABEL WORD
	DW	OFFSET CGMN
	DW	OFFSET CGDDOT
	DW	OFFSET INT_1F_1
	DW	OFFSET CGMN_FDG

	SUBTTL

